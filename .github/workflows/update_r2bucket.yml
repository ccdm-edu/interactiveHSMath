---
#Github action update_r2bucket.yml
# GOAL:
# Changes are made to static code repo and are tested on test website for various devices.  These changes->testing->changes etc
# can result in several files from several directories being updated.  We want to save all these updates in a config file so 
# when testing is finally done we have a full list of files (or really directories) that have changed since we last completed
# testing and that need to be written to R2 bucket.  It is anticipated that a human will write True/False to the config file TestingComplete 
# pair in the config file (r2upload_config.json) to signify testing is ongoing or complete.

# DESIGN NOTES
# Figure out the github repo files of interest that have changed and copy/slam the new version into Cloudflare R2 bucket
# I chose to use existing Github actions that were well accepted by community. Therefore, it uses an action that copies a whole 
# directory to a Cloudflare directory (with matching name).  Yes, this will use up unneeded "write" actions since not all files in directory changed but should be ok.  
# In Github actions marketplace, there is no delete of removed files from R2 bucket--this will leave excess clutter in Cloudflare bucket to be 
# (maybe) manually cleaned but not a problem at this point.  Another inefficiency is when a file is deleted in repo, this is marked as change and whole
# directory is copied over again, needlessly, and the deleted file still remains in r2.
# All of this and its inefficiencies consumes way less space in Cloudflare R2 than allowing
# a clone of the repo into the bucket.  At this time, it saves me a factor of 10 is space.
name: update_r2bucket
run-name: ${{ github.actor }} is updating R2 bucket for static code/public images

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

env:
  CONFIG_FILE_NAME: ".github/config/r2upload_config.json"
  
jobs:
  files-changed:
    #--------------------------checkout repo, find what files changed in directories of interest-----------------------------
    name: detect what files changed
    runs-on: ubuntu-latest
    #allow us to save off to a config file all the changes we make to repo while testing static code for 
    #write to R2 bucket when testing is complete
    permissions:
      contents: write
    timeout-minutes: 3
    outputs:
      upload_dir: ${{ steps.retrieve_these_dir.outputs.old_dir_list }}
      run_the_upload: ${{ steps.changes.outputs.static }}
    steps:
      - run: echo "The update_r2bucket was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of the branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683    #v4.2.2
        
      - name: Paths Changes Filter
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36   #v3.0.2
        id: changes
        with:
          list-files: 'csv'
          filters: |
            static:
              - '**/static/css/**'
              - '**/static/images/**'
              - '**/static/js/**'
              - '**/static/js-lib/**'
              
      #--------------------Read config file and put "testingComplete" and past directories accessed in output---------------
      # Read the config file to see if we are done testing and if any directories have been modified in the past
      - name: check if testing done and collect any old directories modified during test
        id: test_check
        shell: python 
        run: |
          import os
          import json
          config = {}
          testing_done = True
          with open('${{ env.CONFIG_FILE_NAME }}', 'r') as f:
            config = json.load(f)
          if isinstance(config, dict):
            testing_done = config['TestingComplete'].lower()
            list_past_dirs = config['dir_array']
          with open(os.environ['GITHUB_OUTPUT'], "a") as f:
            #need new line to ensure variables are treated as separate in yaml, no space between var, =, \n and value.
            f.write(f"testing_done={testing_done}\n")
            print(f"testing_done={testing_done}\n ")
            f.write(f"list_past_dirs={json.dumps(list_past_dirs)}\n")
            print(f"list of past dirs = {json.dumps(list_past_dirs)}\n")

      - name: Debug testing_done output
        id: why_read_fail
        run: |
          echo "List Past Dir is: ${{ steps.test_check.outputs.list_past_dirs }}"

      #-----------For each file of interest that changed, create unique Key/val pair for writing to R2 buckets---------------
      # look in current check in to see what files were updated.  Will later add this to the saved old directories to 
      # make a list for R2 bucket update when testing is complete
      - name: parse the string
        id: string_to_array
        shell: python
        # need a list of directories with a changed file since r2_upload_action only works at dir level
        if:  steps.changes.outputs.static == 'true'
        #nothing to do if no files in key directories changed...
        run: |
          import os
          import pathlib
          #what we get from paths-filter is list of files that changed from specified directories of 
          #interest, we need to convert this to unique directories
          str_ver = "${{ steps.changes.outputs.static_files }}"
          # test only: str_ver = "dir1/file1.css,dir1/file2.css,dir3/file3.js"
          array_of_files = str(str_ver).split(',')
          array_of_dir_path = []
          json_array_of_dir = '{"dir_array":['                  
          for i in array_of_files:
            currPath = pathlib.Path(i)
            currDir = currPath.parent
            if str(currDir) not in array_of_dir_path:
              array_of_dir_path.append(str(currDir))
          #array results need to be stored as json format to be read back in as array
          # an array of key value pairs where src: myrepo/dir1/dir2/dir3 and dest: dir3 (config matches Cloudflare bucket)
          for i in array_of_dir_path:
            json_array_of_dir = json_array_of_dir + '{"src":"' + i + '", "dest":"' + i + '/" },'
          #remove last extra , and close off json format
          json_array_of_dir = json_array_of_dir[:-1] + ']}'
          print(f'Directories of interest with file changes: (string_to_array json output) {json_array_of_dir} ')
          with open(os.environ['GITHUB_OUTPUT'], "a") as f:
            f.write(f'dir_array={json_array_of_dir}')

      #------------Testing in progress:  take new directories changed and uniquely add to old directories changed.-------------------
      #------------update config file, not R2 bucket---------------------------------------------------------------------------------
      # combine the old directories with new directories so as to preserve only the unique values and write out to config
      # file, waiting for testing to be done so can write it all to R2 buckets
      - name: save these dir since not done testing
        id: save_these_dir
        shell: python 
        if: ${{ steps.test_check.outputs.testing_done == 'false' }}
        run: |
          import os
          import json
          # if there is no new stuff in dir of interest, no need to do this step at all, config file will not change
          if ('${{ steps.changes.outputs.static }}'== 'true'):
            print(f'Testing NOT complete, save these directories in the config file for future')
            # read in old dir array list.  Go through new dir array items and add to list if they are unique
            old_dir_list = ${{ steps.test_check.outputs.list_past_dirs }}
            new_dir_list = ${{ steps.string_to_array.outputs.dir_array }}["dir_array"]
            print(f'old_dir_list is {old_dir_list}')
            print(f'new_dir_list is {new_dir_list}')
            new_stuff_added = False
            for i in new_dir_list:
              if i not in old_dir_list:
                old_dir_list.append(i)
                new_stuff_added = True
                print(f'added new item {i}, will need to write file')
            if (new_stuff_added):
              #slam the old file with new info and files
              with open('${{ env.CONFIG_FILE_NAME }}', 'w') as f:
                f.write('{\n"TestingComplete":"false",\n')
                print('{\n"TestingComplete":"false",\n')  
                dir_entry = str(old_dir_list)
                #remove first superfluous parenthesis
                dir_entry = dir_entry[1:]
                #need dir_entry to be double quoted, so it can be read in as json.  
                dir_entry = dir_entry.replace("'","\"")
                #need to add the key part of key value pair and tack on a \n} at end
                dir_entry = '"dir_array":[' + dir_entry + "}"
                f.write(dir_entry)
                print(f'just before writing to file, dir entry is {dir_entry}')
              # the file is now closed but only on the runner, need to push to my repo, first give runner the permission to do so
              os.system('git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git')
              os.system('git config --local user.email "actions@github.com"')
              os.system('git config --local user.name "GitHub Actions"')
              os.system('git add .github/config/r2upload_config.json')
              os.system('git commit -m "Update config file from workflow"')
              os.system('git push')
            else:
              print('NO need to update config file, no new directorties. Testing not done, will NOT write to R2 storage')
          else:
            print('NO need to update config file, no directories found this commit. Testing not done, will NOT write to R2 storage')

      #-------------Testing Complete:  take old directories changed and uniquely combine with new directories changed-----------
      #---------------prepare to write out to R2 buckets.  Overwrite config file for next coding/testing session----------------
      #add new directories to the old dir from the config file we have been collecting and send the set to R2 upload
      #and clear out the config file of all directories/lists etc.  Should just have TestComplete =F and no saved directories,
      #ready for next code iteration.
      - name: testing done, retrieve all dir changed
        id: retrieve_these_dir
        if: ${{ steps.test_check.outputs.testing_done == 'true' }}
        shell: python
        run: |
          import os
          import json
          print('Testing complete, pull all directories touched into list to be written to R2 bucket')
          # read in old dir array list.  Go through new dir array items, if any, and add to list if they are unique
          old_dir_list = ${{ steps.test_check.outputs.list_past_dirs }}
          print(f'old_dir_list is {old_dir_list}')
          if ${{ steps.changes.outputs.static == 'true' }}:
            new_dir_list = ${{ steps.string_to_array.outputs.dir_array }}["dir_array"]
            print(f'new_dir_list is {new_dir_list}')
            for i in new_dir_list:
              if i not in old_dir_list:
                old_dir_list.append(i)
                print(f'added new item {i}, will need to write file')
          #ok, old_dir_list now setup for later R2 bucket write.  Set up config file for next code/test cycle
          with open('${{ env.CONFIG_FILE_NAME }}', 'w') as f:
            print('Write out clean config file for next code-test cycle')
            # no leftover directories, in testing
            f.write('{\n"TestingComplete":"false"\n}')
            # the file is now closed but only on the runner, need to push to my repo, first give runner the permission to do so
            os.system('git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git')
            os.system('git config --local user.email "actions@github.com"')
            os.system('git config --local user.name "GitHub Actions"')
            os.system('git add .github/config/r2upload_config.json')
            os.system('git commit -m "Update config file from workflow"')
            os.system('git push')  

            
  #######################################################################################################################         
  push_new_files_up:
    if: ${{ needs.files-changed.outputs.is_testing_complete == 'true' }} 
    #if: false
    strategy: 
      matrix:
        # CF R2 bucket directory structure is set up similar to static directories of interest
        # an array of key value pairs where src: myrepo/dir1/dir2/dir3 and dest: dir3 (config matches Cloudflare bucket)
        CONFIG_upload: ${{ fromJSON(needs.files-changed.outputs.upload_dir).dir_array }}  
    runs-on: ubuntu-latest
    needs: [files-changed]
    steps:

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683    #v4.2.2
        
      - name: push dir to CF R2 bucket
        id: push_GH_dir_2_R2
        uses: ryand56/r2-upload-action@3bee737337fc7ecb450bedfff45cfa2ed953e576    #v1.4
        with:
          r2-account-id: ${{ secrets.R2_ACCOUNT_ID }}
          r2-access-key-id: ${{ secrets.R2_ACCESS_KEY_ID }}
          r2-secret-access-key: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          r2-bucket: ${{ secrets.R2_BUCKET }}
          source-dir: ${{ matrix.CONFIG_upload.src }}
          destination-dir: ${{ matrix.CONFIG_upload.dest }}
          keep-file-fresh: 'true'

      - name: check results
        id: check_CF_write
        run: |
          echo 'The write to Cloudflare R2 static code bucket success boolean:  ${{ steps.push_GH_dir_2_R2.outputs.result }}'
          echo 'The resulting URLs written were ${{ steps.push_GH_dir_2_R2.outputs.file-urls }}'
          
...

